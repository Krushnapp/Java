
import java.util.Optional;

public class OptionalExample {

    public static void main(String[] args) {
        // Optional creation based on database call (simulated with functions)
        Optional<String> userName = getUserNameFromDB(122); // Replace with your DB access function

        // Checking for value presence
        if (userName.isPresent()) {
            System.out.println("User name is present: " + userName.get());
        } else {
            System.out.println("User name is not present (from DB)");
        }

        // Handling absent value with orElse
        String defaultName = userName.orElse("Default User");
        System.out.println("Name from Optional (orElse): " + defaultName);

        // Handling absent value with orElseGet (Supplier for dynamic default value)
        String dynamicDefault = userName.orElseGet(() -> "Guest_" + System.currentTimeMillis());
        System.out.println("Name from Optional (orElseGet): " + dynamicDefault);

        // Handling absent value with ifPresent (execute code if value is present)
        userName.ifPresent(name -> System.out.println("Uppercase name: " + name.toUpperCase()));

        // Handling absent value with map (transformation if value is present)
        Optional<Integer> nameLength = userName.map(String::length);
        if (nameLength.isPresent()) {
            System.out.println("Name length: " + nameLength.get());
        } else {
            System.out.println("No name to get length");
        }

        // Handling absent value with filter (filter based on condition)
        Optional<String> adminName = userName.filter(name -> name.equals("John Doe"));
        if (adminName.isPresent()) {
            System.out.println("Admin name found: " + adminName.get());
        } else {
            System.out.println("No admin name found");
        }

        // **Optional.ofNullable** Example (handling potential null values)
        String externalName = getNameFromExternalSource();
        Optional<String> safeOptionalName = Optional.ofNullable(externalName);

        String safeDefaultName = safeOptionalName.orElse("External source name unavailable");
        System.out.println("Name from external source (orElse): " + safeDefaultName);

        // **orElseThrow** Example (throwing custom exception)
        try {
            String riskyName = safeOptionalName.orElseThrow(() -> new IllegalStateException("Name not found from external source"));
            System.out.println("Risky name retrieval (orElseThrow): " + riskyName);
        } catch (IllegalStateException e) {
            System.out.println("Error retrieving name: " + e.getMessage());
        }

        // **flatMap** Example (chaining transformations)
        Optional<Integer> sanitizedLength = safeOptionalName
                .filter(name -> name.length() > 3) // Filter names longer than 3 characters
                .flatMap(name -> Optional.of(name.length())); // Map name to its length

        sanitizedLength.ifPresent(length -> System.out.println("Sanitized name length (flatMap): " + length));

        // **Avoid using get() in most cases** (use alternatives for handling empty Optionals)
        // String nullName = userName.get(); // throws NoSuchElementException if absent
        System.out.println("Optional is empty: " + userName.isEmpty()); // Check if Optional is empty
    }

    // Simulated function to represent database access (replace with your actual logic)
    public static Optional<String> getUserNameFromDB(int userId) {
        if (userId % 2 == 0) {
            return Optional.empty();
        } else {
            return Optional.of("John Doe");
        }
    }

    // Simulated function to represent external source that might return null
    public static String getNameFromExternalSource() {
        // Replace with your actual logic to retrieve name from external source
        // This example might return null
        return Math.random() > 0.5 ? "External Name" : null;
    }
}

```

This code demonstrates various Optional class methods with different scenarios:

 Creation: `Optional.of(value)` for a value, `Optional.empty()` for no value.
 isPresent(): Checks if a value is present.
 orElse(defaultValue): Returns the value if present, otherwise the default value.
 orElseGet(Supplier): Returns the value if present, otherwise the value generated by the Supplier function (dynamic default value).
 ifPresent(consumer): Executes a code block if a value is present (useful for side effects).
 map(function): Applies a function to the value if present and returns a new Optional with the transformed value.
 filter(predicate): Filters the value based on a condition and returns a new Optional if it passes the filter.
 get(): Gets the value if present (throws NoSuchElementException if absent - use with caution).
 isEmpty(): Checks if the Optional is empty.

This example covers different scenarios from easy (checking presence) to critical (getting the value - use with caution) to showcase the flexibility of Optional for handling nullable data. Remember, avoid using `get()` directly and prefer methods like `orElse` or `ifPresent` for safer code. 