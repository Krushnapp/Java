In addition to predicates, functional interfaces in Java can represent various types of functions depending on the number of input arguments and the return type. Here are some common functional interfaces in Java's `java.util.function` package:

1. **Supplier**: Represents a supplier of results, typically no input arguments and produces a result of a specified type.

2. **Consumer**: Represents an operation that accepts a single input argument and returns no result.

3. **Function**: Represents a function that accepts one argument and produces a result.

4. **UnaryOperator**: Represents an operation on a single operand that produces a result of the same type as its operand.

5. **BinaryOperator**: Represents an operation upon two operands of the same type, producing a result of the same type as the operands.

6. **BiFunction**: Represents a function that accepts two arguments and produces a result.

7. **Predicate**: Represents a predicate (boolean-valued function) of one argument.

These functional interfaces provide a way to define and pass behavior in a concise and flexible manner, particularly when working with lambda expressions or method references. Each interface is designed to serve a specific purpose, such as supplying values, consuming values, transforming values, or testing conditions.